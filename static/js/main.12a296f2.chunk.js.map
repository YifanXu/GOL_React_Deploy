{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["unSelectedStyle","selectedStyle","GameOfLife","props","state","paused","cycle","populateChance","updateInterval","showNeighbors","grid","initGrid","size","this","interval","setInterval","updateGrid","reset","bind","clearInterval","i","gridRow","j","push","status","neighbor","flipList","length","cell","row","col","handleChange","setState","coordinates","newDataSet","slice","value","delta","rowDelta","colDelta","updateNeighbor","change","hardEdge","chance","hitList","Math","random","console","log","forceUpdate","rows","key","style","className","onClick","ButtonGroup","Button","randomPopulate","onChange","e","target","type","newInterval","React","Component","App","applied","form","event","name","Object","assign","Form","onSubmit","preventDefault","id","Row","Col","md","Label","for","Input","sm","disabled","FormGroup","check","checked","handleSubmit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12a296f2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { ButtonGroup, Button} from 'reactstrap'\r\nimport './Game.css'\r\n\r\nconst unSelectedStyle = {\r\n    'color': 'black',\r\n    'backgroundColor': 'white'\r\n}\r\n\r\nconst selectedStyle = {\r\n    'color': 'white',\r\n    'backgroundColor': 'red'\r\n}\r\n\r\nclass GameOfLife extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            paused: true,\r\n            cycle: 0,\r\n            populateChance: 0.3,\r\n            updateInterval: 100,\r\n            showNeighbors: false,\r\n            grid: this.initGrid(this.props.size)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.interval = setInterval(() =>{\r\n            if(this.state.paused) return;\r\n            this.updateGrid();\r\n        }, this.state.updateInterval);\r\n\r\n        this.reset = this.initGrid.bind(this)\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n   \r\n    initGrid (size) {\r\n        let grid = [];\r\n        for(let i = 0; i < this.props.size; i++) {\r\n            let gridRow = [];\r\n            for(let j = 0; j < this.props.size; j++) {\r\n                gridRow.push({\r\n                    status: false,\r\n                    neighbor: 0,\r\n                });\r\n            }\r\n            grid.push(gridRow)\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    updateGrid () {\r\n        let flipList = [];\r\n        for(let i = 0; i < this.state.grid.length; i++) {\r\n            for(let j = 0; j < this.state.grid[i].length; j++) {\r\n                let cell = this.state.grid[i][j];\r\n                \r\n                // Setup Rule\r\n                if((cell.status && (cell.neighbor < 2 || cell.neighbor > 3)) || (!cell.status && cell.neighbor === 3)) {\r\n                    flipList.push({\r\n                        row: i,\r\n                        col: j\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        this.handleChange(flipList)\r\n        this.setState({\r\n            cycle: this.state.cycle + 1\r\n        })\r\n    }\r\n\r\n    handleChange(coordinates) {\r\n        let newDataSet = this.state.grid.slice();\r\n        for(let i = 0; i < coordinates.length; i++) {\r\n            // Is Adding?\r\n            let value = newDataSet[coordinates[i].row][coordinates[i].col].status\r\n\r\n            // Update Status\r\n            newDataSet[coordinates[i].row][coordinates[i].col].status =  value ? 0 : 1;\r\n\r\n            // Update Neighbor Count\r\n            const delta = value ? -1 : 1;\r\n            for(let rowDelta = -1; rowDelta <= 1; rowDelta++) {\r\n                for(let colDelta = -1; colDelta <= 1; colDelta++) {\r\n                    if(rowDelta === 0 && colDelta === 0) {\r\n                        continue;\r\n                    }\r\n                    this.updateNeighbor(newDataSet, coordinates[i].row + rowDelta, coordinates[i].col + colDelta, delta)\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: newDataSet})\r\n    }\r\n\r\n    updateNeighbor (grid, row, col, change) {\r\n       if (this.props.hardEdge && (row < 0 || row >= this.props.size || col < 0 || col >= this.props.size)) {\r\n           return;\r\n       }\r\n\r\n       if(!this.props.hardEdge) {\r\n           if(row < 0) row = this.props.size - 1;\r\n           if(row >= this.props.size) row = 0;\r\n           if(col < 0) col = this.props.size - 1;\r\n           if(col >= this.props.size) col = 0;\r\n       }\r\n       grid[row][col].neighbor += change;\r\n    }\r\n\r\n    randomPopulate(chance) {\r\n        let hitList = [];\r\n        for(let i = 0; i < this.props.size; i++) {\r\n            for(let j = 0; j < this.props.size; j++) {\r\n                if(Math.random() <= chance) {\r\n                    hitList.push({\r\n                        row: i,\r\n                        col: j\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        console.log(`repopulating ${hitList.length} cells`)\r\n        this.handleChange(hitList)\r\n    }\r\n\r\n    render() {\r\n        //If the grid actually has a different size than expected, rerender\r\n        if(this.state.grid.length !== this.props.size) {\r\n            this.forceUpdate();\r\n        }\r\n\r\n        let rows = [];\r\n        // Construct Elements\r\n        for(let i = 0; i < this.props.size; i++) {\r\n            let row = [];\r\n\r\n            for(let j = 0; j < this.props.size; j++) {\r\n                row.push(\r\n                    <th key={j}>\r\n                        <button \r\n                            style={this.state.grid[i][j].status ? selectedStyle : unSelectedStyle} \r\n                            className=\"gridButton\"\r\n                            onClick={()=>this.handleChange([{row: i, col: j}])}\r\n                        >\r\n                            {/* {this.state.showNeighbors ? this.state.grid[i][j].neighbor : null} */}\r\n                        </button>\r\n                    </th>\r\n                )\r\n            }\r\n            rows.push(<tr key={i}>{row}</tr>)\r\n        }\r\n        return (\r\n            <div>\r\n                <table>\r\n                    <tbody>{rows}</tbody>\r\n                </table>\r\n                <br/>\r\n                <div className=\"controllGroup\">\r\n                    <ButtonGroup>\r\n                        <Button onClick={()=> this.setState({paused: !this.state.paused})}>{this.state.paused ? 'Paused' : 'Running'}</Button>\r\n                        <Button onClick={this.updateGrid.bind(this)}>Next</Button>\r\n                        <Button onClick={()=>this.randomPopulate(this.state.populateChance)}>Flip {this.state.populateChance * 100}% cells</Button>\r\n                        <Button onClick={()=>this.setState({grid: this.initGrid(this.props.size)})}>Clear</Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n                <div className=\"controllGroup\">\r\n                    Flip chance\r\n                    <input value={this.state.populateChance} onChange={e=>this.setState({populateChance: e.target.value})}/>\r\n                </div>\r\n                <div className=\"controllGroup\">\r\n                    Show Neighbor Count\r\n                    <input type=\"checkbox\" value={this.state.showNeighbors} onChange={e=>this.setState({showNeighbors: e.target.value})}/>\r\n                </div>\r\n                <div className=\"controllGroup\">\r\n                    Update Interval: \r\n                    <input value={this.state.updateInterval} onChange={e=>{\r\n                        const newInterval = e.target.value\r\n                        this.setState({updateInterval: newInterval})\r\n                        if(this.interval) {\r\n                            clearInterval(this.interval);\r\n                        }\r\n                        this.interval = setInterval(() =>{\r\n                            if(this.state.paused) return;\r\n                            this.updateGrid();\r\n                        }, newInterval);\r\n                    }}/>\r\n                </div>\r\n                \r\n                <p>Cycle {this.state.cycle}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameOfLife","import React from 'react';\nimport './App.css';\nimport { Form, FormGroup, Row, Col, Label, Input, Button } from 'reactstrap'\n//import 'bootstrap/dist/css/bootstrap.css';\nimport GameOfLife from './Game'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      applied: null,\n      form: {\n        size: 30,\n        hardEdge: true,\n      }\n    }\n  }\n  \n  handleChange(event) {\n    this.setState({\n      form: {\n        ...this.state.form,\n        [event.target.name]: [event.target.value]\n      }\n    })\n  }\n\n  handleSubmit (event) {\n    if(this.state.form.size <= 0) return;\n    this.setState({applied: Object.assign(this.state.form)})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Conway's Game of Life (React Edition)</h1>\n        <br/>\n        { this.state.applied ? null : \n          <Form onSubmit={e => { e.preventDefault(); }} id=\"setupForm\">\n            <Row form>\n              <Col md={1}>\n                <Label for=\"sizeInput\">Size</Label>\n              </Col>\n              <Col md={3}>\n                <Input sm={2} type=\"number\" id=\"sizeInput\" name=\"size\" onChange={this.handleChange.bind(this)} value={this.state.form.size} disabled={this.state.applied}/>\n              </Col>\n              <Col md={4}>\n                <FormGroup check>\n                  <Label check>\n                    <Input type=\"checkbox\" name=\"hardEdge\" checked={this.state.hardEdge} onChange={this.handleChange.bind(this)} disabled={this.state.applied}/> Enforce wall at edges\n                  </Label>\n                </FormGroup>\n              </Col>\n              <Col md={4}>\n                <Button type=\"button\" onClick={this.handleSubmit.bind(this)} disabled={this.state.applied}>Confirm</Button>\n              </Col>\n            </Row>\n          </Form>\n        }\n        <hr/>\n        {this.state.applied ? <GameOfLife size={this.state.applied.size} hardEdge={this.state.applied.hardEdge}/> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}